{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["getBadgeClasses","count","classes","Counter","props","counter","onIncrement","onDelete","onDecrement","className","value","onClick","disabled","id","Counters","onReset","counters","map","key","Navbar","href","totalCounters","App","state","handleReset","setState","handleIncrement","idx","indexOf","handleDecrement","handleDelete","counterId","filter","c","Fragment","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd336e93.chunk.js","sourcesContent":["import React from \"react\";\n\nconst formatCount = (count) => {\n  return count === 0 ? \"Zero\" : count;\n};\n\nconst getBadgeClasses = (count) => {\n  let classes = \"badge m-2 badge-\";\n  classes += count == 0 ? \"warning\" : \"primary\";\n  return classes;\n};\n\nconst Counter = (props) => {\n  const { counter, onIncrement, onDelete, onDecrement } = props;\n  return (\n    <div className=\"row\">\n      <div className=\"col-1 div\">\n        <span className={getBadgeClasses(counter.value)}>\n          {formatCount(counter.value)}\n        </span>\n      </div>\n      <div className=\"col\">\n        <button\n          onClick={() => onIncrement(counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          +\n        </button>\n        <button\n          onClick={() => onDecrement(counter)}\n          className=\"btn btn-secondary btn-sm m-2\"\n          disabled={counter.value === 0 ? \"disabled\" : \"\"}\n        >\n          -\n        </button>\n        <button\n          onClick={() => onDelete(counter.id)}\n          className=\"btn btn-danger btn-sm\"\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nconst Counters = (props) => {\n  return (\n    <div>\n      <button className=\"btn btn-primary btn-sm m-2\" onClick={props.onReset}>\n        Reset\n      </button>\n      {props.counters.map((counter) => (\n        <Counter\n          key={counter.id}\n          counter={counter}\n          onIncrement={props.onIncrement}\n          onDelete={props.onDelete}\n          onDecrement={props.onDecrement}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Counters;\n","import React, { Component } from \"react\";\n\nconst Navbar = (props) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Active counters{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {props.totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((counter) => {\n      counter.value = 0;\n      return counter;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const idx = counters.indexOf(counter);\n    counters[idx] = { ...counter }; //its not longer pointting to the object of the state\n    counters[idx].value++;\n\n    this.setState({ counters });\n  };\n\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const idx = counters.indexOf(counter);\n    counters[idx] = { ...counter }; //its not longer pointting to the object of the state\n    counters[idx].value--;\n\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main>\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onDecrement={this.handleDecrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n// function App() {\n\n// }\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}